Invocable method example with primitive datatype and return type

Public class AccountQueryAction{
	@InvocableMethod(label='Get Account Names' description ='Return account names' category='Account')
	public static List<String> getAccountNames(List<Id> ids){
		List<String> accountNamesList = new List<Account>();
		List<Account> acc = [SELECT Name FROM Account WHERE Id IN:ids];
		for(Account account : acc){
		accountNamesList.add(account.Name);
		}
		return accountNamesList;
	}
}

====================================================================================================================
Invocable method Example with sObject(Specific) datatype and primitive return type

public class AccountInsertAction{
	@InvocableMethod(label = 'Account Insertion' description ='Account insertion and get all the ids of inserted accounts' category ='Account')
	public static List<Id> getAccountId(List<Account> acc){
	Database.SaveResult[] res = Database.Insert(acc);
	List<Id> getAllAccId = new List<Id>();
	for(Database.SaveResult result :res){
		if(result.isSuccess()){
		getAllAccId.add(result.getId());	
		}	
	}
	return getAllAccId;
	}
}
=====================================================================================================================

Advanced example that uses a custom class type as parameter

uses invocable variables as input

public class MathUtil{
	@InvocableMethod(label = 'Add Two Number')
	public static List<Integer> add(List<FlowInput> intFl){
	List<Integer> result = new List<Integer>();
	for(FlowInput FI : intFl){
	Integer myInt = FI.Int1 + FI.Int2;
	result.add(myInt);
	}
	return result; 
	}

public class FlowInput{
	@InvocableVarriable(label = 'Int1' required = 'true')
	public integer Int1;
	@InvocableVarriable(label = 'Int2' required = 'true')
	public integer Int2;	
	}
}
==============================================================================================================================
Map<String, Object> params = new Map<String, Object>{
	'Input'=>5
}
Flow.Interview.Square myFlow = new Flow.Interview.Square(params);
myFlow.start();
Decimal result = (Decimal)myFlow.getVarriableValue('Result');
system.debug('The Result is:'+ result)

==========================================================================================================
Map<String, Object> params = new Map<String, Object>{
	'Input'=>5
}
Flow.Interview myFlow = new Flow.Interview.createinterview(Square,params);
myFlow.start();
Decimal result = (Decimal)myFlow.getVarriableValue('Result');
system.debug('The Result is:'+ result)




